/*
Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
*/

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int arr[] = new int[nums.length];
        for(int i = 0; i < nums.length; i++)
        {
            int max = nums[i]; 
            boolean chinnu = false;
            for(int j = i + 1; j<nums.length; j++)
            {
                if(max < nums[j])
                {
                    max = nums[j];
                    chinnu =  true;
                    break;
                }
            }
            if(!chinnu){
                for(int j = 0 ; j < i; j++)
                {
                    if(max < nums[j])
                     {
                             max = nums[j];
                              chinnu =  true;
                              break;
                     }
                }
            }
            if(max>nums[i]){
                arr[i]=max;
            }else{
                arr[i]=-1;
            }
        }
        return arr;
    }
}